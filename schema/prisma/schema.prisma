//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    OWNER
    MANAGER
    MEMBER
}

enum MonitorType {
    HttpMonitor
    PingMonitor
    PortMonitor
}

enum HttpIncidentType {
    Http
    Timeout
}

model Team {
    id String @id() @default(cuid())
    name String
    description String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    members TeamMembership[]
    monitors Monitor[]
}

model User {
    id String @id() @unique() @default(cuid())
    name String?
    /// @email
    email String @unique()
    passwordHash String
    createdAt DateTime @default(now())
    memberships TeamMembership[]
    incidentComments IncidentComment[]
}

model TeamMembership {
    id String @id() @unique() @default(cuid())
    role Role
    teamId String
    userId String
    joinedAt DateTime @default(now())
    team Team @relation(fields: [teamId], references: [id])
    user User @relation(fields: [userId], references: [id])

    @@unique([teamId, userId])
}

model Tag {
    name String @id()
}

/// @@delegate(type)
model Monitor {
    type MonitorType
    id String @id() @default(cuid())
    name String
    createdAt DateTime @default(now())
    /// @gte(30)
    /// @lte(86400)
    intervalSeconds Int
    teamId String?
    team Team? @relation(fields: [teamId], references: [id])
    delegate_aux_httpMonitor HttpMonitor?
    delegate_aux_pingMonitor PingMonitor?
    delegate_aux_portMonitor PortMonitor?

    @@ignore()
}

model IncidentComment {
    authorId String @ignore()
    author User @relation(fields: [authorId], references: [id])
    createdAt DateTime @default(now())
    incidentId String @ignore()
    httpIncident HttpIncident? @relation(fields: [incidentId], references: [id]) @ignore()
    pingIncident PingIncident? @relation(fields: [incidentId], references: [id]) @ignore()
    portIncident PortIncident? @relation(fields: [incidentId], references: [id]) @ignore()

    @@unique([author, createdAt])
}

model HttpMonitor {
    /// @gte(1)
    /// @lte(60)
    timeoutSeconds Int @db.SmallInt()
    id String @id()
    /// @url
    /// @regex('^https?://')
    url String
    responses HttpResponse[]
    incidents HttpIncident[]
    delegate_aux_monitor Monitor @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@ignore()
}

model HttpResponse {
    monitorId String @ignore()
    startTime DateTime
    monitor HttpMonitor @relation(fields: [monitorId], references: [id])
    responseTimeMs Int @db.SmallInt()

    @@unique(fields: [monitorId, startTime])
}

/// @@validate(type == Http && httpsStatusCode != null && (httpsStatusCode < 200 || httpsStatusCode >= 300))
/// @@validate(type == Timeout && httpsStatusCode == null && responseHeaders == null)
model HttpIncident {
    monitorId String @ignore()
    startTime DateTime
    id String @id() @default(cuid()) @ignore()
    ongoing Boolean
    comments IncidentComment[]
    monitor HttpMonitor @relation(fields: [monitorId], references: [id])
    type HttpIncidentType
    requestHeaders Json
    httpsStatusCode Int? @db.SmallInt()
    responseHeaders Json?

    @@unique(fields: [monitorId, startTime])
}

model PingMonitor {
    id String @id()
    address String
    responses PingResponse[]
    incidents PingIncident[]
    delegate_aux_monitor Monitor @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@ignore()
}

model PingResponse {
    monitorId String @ignore()
    startTime DateTime
    monitor PingMonitor @relation(fields: [monitorId], references: [id])
    responseTimeMs Int @db.SmallInt()

    @@unique(fields: [monitorId, startTime])
}

model PingIncident {
    monitorId String @ignore()
    startTime DateTime
    id String @id() @default(cuid()) @ignore()
    ongoing Boolean
    comments IncidentComment[]
    monitor PingMonitor @relation(fields: [monitorId], references: [id])

    @@unique(fields: [monitorId, startTime])
}

model PortMonitor {
    /// @gte(1)
    /// @lte(60)
    timeoutSeconds Int @db.SmallInt()
    id String @id()
    /// @gte(1)
    /// @lte(65535)
    tcoPort Int
    responses PortResponse[]
    incidents PortIncident[]
    delegate_aux_monitor Monitor @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@ignore()
}

model PortResponse {
    monitorId String @ignore()
    startTime DateTime
    monitor PortMonitor @relation(fields: [monitorId], references: [id])
    responseTimeMs Int @db.SmallInt()

    @@unique(fields: [monitorId, startTime])
}

model PortIncident {
    monitorId String @ignore()
    startTime DateTime
    id String @id() @default(cuid()) @ignore()
    ongoing Boolean
    comments IncidentComment[]
    monitor PortMonitor @relation(fields: [monitorId], references: [id])

    @@unique(fields: [monitorId, startTime])
}