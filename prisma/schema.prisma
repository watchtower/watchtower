generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Workspace {
  id          String   @id @unique @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members  WorkspaceMembership[]
  services Service[]
  apiKeys  ApiKey[]
}

model User {
  id           String   @id @unique @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  memberships WorkspaceMembership[]
}

model WorkspaceMembership {
  id          String   @id @unique @default(cuid())
  role        Role
  workspaceId String
  userId      String
  joinedAt    DateTime @default(now())

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([workspaceId, userId])
}

enum Role {
  OWNER
  MANAGER
  MEMBER
}

model Service {
  id          String         @id @unique @default(cuid())
  name        String
  type        MonitoringType
  httpUrl     String?
  httpMethod  HttpMethod?
  pingAddress String?
  port        Int?
  interval    Int
  checkSSL    Boolean        @default(false)
  checkDomain Boolean        @default(false)
  timeout     Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  responses ServiceResponse[]

  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
}

enum MonitoringType {
  HTTP
  PING
  PORT
}

enum HttpMethod {
  GET
  POST
}

model ServiceResponse {
  id               String        @id @unique @default(cuid())
  serviceId        String
  startTime        DateTime
  endTime          DateTime      @default(now())
  status           ServiceStatus
  responseTime     Int
  statusCode       Int?
  sslExpiryDays    Int?
  domainExpiryDays Int?

  service Service @relation(fields: [serviceId], references: [id])
}

enum ServiceStatus {
  UP
  DOWN
  TIMEOUT
  UNKNOWN
}

model ApiKey {
  id          String    @id @unique @default(cuid())
  name        String
  key         String    @unique
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
}
