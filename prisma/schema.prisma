generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model Monitors {
//   id        String   @id @default(cuid())
//   name      String
//   url       String
//   status    Boolean?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   pings     Ping[]
// }

// model Ping {
//   monitor   Monitors @relation(fields: [monitorId], references: [id])
//   monitorId String
//   start     DateTime
//   end       DateTime
//   status    Int

//   @@id([monitorId, start])
// }

model Team {
  id          String   @id @unique @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members  TeamMembership[]
  services Service[]
}

model User {
  id           String   @id @unique @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  memberships TeamMembership[]
}

model TeamMembership {
  id       String   @id @unique @default(cuid())
  role     Role
  teamId   String
  userId   String
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

enum Role {
  OWNER
  MANAGER
  MEMBER
}

model Service {
  id          String         @id @unique @default(cuid())
  name        String // Name of the service
  type        MonitoringType // Type of monitoring (HTTP, Ping, Port)
  httpUrl     String? // URL of the service
  httpMethod  HttpMethod? // HTTP method if type is HTTP
  pingAddress String? // Address for Ping monitoring
  port        Int? // Port number for Port monitoring
  interval    Int // Interval between checks in seconds
  checkSSL    Boolean        @default(false) // Check for SSL expiry
  checkDomain Boolean        @default(false) // Check for domain expiry
  timeout     Int? // Timeout for requests in seconds
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])
}

enum MonitoringType {
  HTTP
  PING
  PORT
}

enum HttpMethod {
  GET
  POST
}
